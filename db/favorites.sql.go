// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorites.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE
FROM favorite
WHERE id = $1
  AND user_id = $2
  AND workspace_id = $3
`

type DeleteFavoriteParams struct {
	ID          int64
	UserID      int64
	WorkspaceID int64
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.Exec(ctx, deleteFavorite, arg.ID, arg.UserID, arg.WorkspaceID)
	return err
}

const deleteFavoritesByEntityId = `-- name: DeleteFavoritesByEntityId :exec
DELETE
FROM favorite
WHERE entity_id = $1
  AND workspace_id = $2
  AND user_id = $3
`

type DeleteFavoritesByEntityIdParams struct {
	EntityID    int64
	WorkspaceID int64
	UserID      int64
}

func (q *Queries) DeleteFavoritesByEntityId(ctx context.Context, arg DeleteFavoritesByEntityIdParams) error {
	_, err := q.db.Exec(ctx, deleteFavoritesByEntityId, arg.EntityID, arg.WorkspaceID, arg.UserID)
	return err
}

const getFavoritesForUser = `-- name: GetFavoritesForUser :many
SELECT id,
       user_id,
       entity_type,
       entity_id,
       workspace_id,
       created,
       updated,
       order_idx
FROM favorite
WHERE user_id = $1
  AND workspace_id = $2
ORDER BY order_idx ASC
LIMIT $3
`

type GetFavoritesForUserParams struct {
	UserID      int64
	WorkspaceID int64
	Limit       int64
}

func (q *Queries) GetFavoritesForUser(ctx context.Context, arg GetFavoritesForUserParams) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, getFavoritesForUser, arg.UserID, arg.WorkspaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EntityType,
			&i.EntityID,
			&i.WorkspaceID,
			&i.Created,
			&i.Updated,
			&i.OrderIdx,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxOrderIndexForUser = `-- name: GetMaxOrderIndexForUser :one
SELECT COALESCE(MAX(order_idx), 0) AS max_idx
FROM favorite
WHERE user_id = $1
  AND workspace_id = $2
`

type GetMaxOrderIndexForUserParams struct {
	UserID      int64
	WorkspaceID int64
}

func (q *Queries) GetMaxOrderIndexForUser(ctx context.Context, arg GetMaxOrderIndexForUserParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getMaxOrderIndexForUser, arg.UserID, arg.WorkspaceID)
	var max_idx pgtype.Int4
	err := row.Scan(&max_idx)
	return max_idx, err
}

const insertFavorite = `-- name: InsertFavorite :one
INSERT INTO favorite (user_id, entity_type, entity_id, workspace_id, created, updated, order_idx)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, entity_type, entity_id, workspace_id, created, updated, order_idx
`

type InsertFavoriteParams struct {
	UserID      int64
	EntityType  int32
	EntityID    int64
	WorkspaceID int64
	Created     int64
	Updated     int64
	OrderIdx    int32
}

func (q *Queries) InsertFavorite(ctx context.Context, arg InsertFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, insertFavorite,
		arg.UserID,
		arg.EntityType,
		arg.EntityID,
		arg.WorkspaceID,
		arg.Created,
		arg.Updated,
		arg.OrderIdx,
	)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EntityType,
		&i.EntityID,
		&i.WorkspaceID,
		&i.Created,
		&i.Updated,
		&i.OrderIdx,
	)
	return i, err
}

const reindexFavoritesForUser = `-- name: ReindexFavoritesForUser :exec
UPDATE favorite
SET order_idx = new_idx.new_order
FROM (SELECT id, ROW_NUMBER() OVER (ORDER BY order_idx ASC) * $1::BIGINT AS new_order
      FROM favorite
      WHERE user_id = $2::BIGINT
        AND workspace_id = $3::BIGINT) AS new_idx
WHERE favorite.id = new_idx.id
`

type ReindexFavoritesForUserParams struct {
	Gap         int64
	UserID      int64
	WorkspaceID int64
}

func (q *Queries) ReindexFavoritesForUser(ctx context.Context, arg ReindexFavoritesForUserParams) error {
	_, err := q.db.Exec(ctx, reindexFavoritesForUser, arg.Gap, arg.UserID, arg.WorkspaceID)
	return err
}

const updateFavoriteOrder = `-- name: UpdateFavoriteOrder :exec
UPDATE favorite
SET order_idx = $1,
    updated   = $2
WHERE id = $3
`

type UpdateFavoriteOrderParams struct {
	OrderIdx int32
	Updated  int64
	ID       int64
}

func (q *Queries) UpdateFavoriteOrder(ctx context.Context, arg UpdateFavoriteOrderParams) error {
	_, err := q.db.Exec(ctx, updateFavoriteOrder, arg.OrderIdx, arg.Updated, arg.ID)
	return err
}
