// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"
)

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM session
WHERE token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, token)
	return err
}

const getNonExpiredSessionByToken = `-- name: GetNonExpiredSessionByToken :one
SELECT id, ua, ip, user_id, token, expires, created, updated
FROM session
WHERE session.token = $1 AND session.expires > $2
`

type GetNonExpiredSessionByTokenParams struct {
	Token   string
	Expires int64
}

func (q *Queries) GetNonExpiredSessionByToken(ctx context.Context, arg GetNonExpiredSessionByTokenParams) (Session, error) {
	row := q.db.QueryRow(ctx, getNonExpiredSessionByToken, arg.Token, arg.Expires)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UA,
		&i.IP,
		&i.UserID,
		&i.Token,
		&i.Expires,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, default_workspace_id, name, email, role, password, verified, created, updated
FROM "user"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DefaultWorkspaceID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.Verified,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, default_workspace_id, name, email, role, password, verified, created, updated
FROM "user"
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DefaultWorkspaceID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.Verified,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, default_workspace_id, name, email, role, password, verified, created, updated
FROM "user"
WHERE id = ANY($1)
`

func (q *Queries) GetUsersByIDs(ctx context.Context, id []int64) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.DefaultWorkspaceID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Password,
			&i.Verified,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersForWorkspace = `-- name: GetUsersForWorkspace :many
SELECT u.id, u.default_workspace_id, u.name, u.email, u.role, u.password, u.verified, u.created, u.updated
FROM "user" u
JOIN user_workspaces uw ON u.id = uw.user_id
WHERE uw.workspace_id = $1
`

func (q *Queries) GetUsersForWorkspace(ctx context.Context, workspaceID int64) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersForWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.DefaultWorkspaceID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Password,
			&i.Verified,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, description, created, updated
FROM workspace
WHERE id = $1
`

func (q *Queries) GetWorkspaceByID(ctx context.Context, id int64) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getWorkspacesForUser = `-- name: GetWorkspacesForUser :many
SELECT w.id, w.name, w.description, w.created, w.updated
FROM workspace w
JOIN user_workspaces uw ON w.id = uw.workspace_id
WHERE uw.user_id = $1
`

func (q *Queries) GetWorkspacesForUser(ctx context.Context, userID int64) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, getWorkspacesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSession = `-- name: InsertSession :one
INSERT INTO session (ua, ip, user_id, token, expires, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertSessionParams struct {
	UA      string
	IP      string
	UserID  int64
	Token   string
	Expires int64
	Created int64
	Updated int64
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertSession,
		arg.UA,
		arg.IP,
		arg.UserID,
		arg.Token,
		arg.Expires,
		arg.Created,
		arg.Updated,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (default_workspace_id, name, email, role, password, verified, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type InsertUserParams struct {
	DefaultWorkspaceID int64
	Name               string
	Email              string
	Role               string
	Password           string
	Verified           bool
	Created            int64
	Updated            int64
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.DefaultWorkspaceID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Password,
		arg.Verified,
		arg.Created,
		arg.Updated,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertUserWorkspace = `-- name: InsertUserWorkspace :one
INSERT INTO user_workspaces (user_id, workspace_id)
VALUES ($1, $2)
RETURNING id, user_id, workspace_id
`

type InsertUserWorkspaceParams struct {
	UserID      int64
	WorkspaceID int64
}

func (q *Queries) InsertUserWorkspace(ctx context.Context, arg InsertUserWorkspaceParams) (UserWorkspace, error) {
	row := q.db.QueryRow(ctx, insertUserWorkspace, arg.UserID, arg.WorkspaceID)
	var i UserWorkspace
	err := row.Scan(&i.ID, &i.UserID, &i.WorkspaceID)
	return i, err
}

const insertWorkspace = `-- name: InsertWorkspace :one
INSERT INTO workspace (name, description, created, updated)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertWorkspaceParams struct {
	Name        string
	Description string
	Created     int64
	Updated     int64
}

func (q *Queries) InsertWorkspace(ctx context.Context, arg InsertWorkspaceParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertWorkspace,
		arg.Name,
		arg.Description,
		arg.Created,
		arg.Updated,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE "user"
SET name = $1
WHERE id = $2
`

type UpdateUserNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.Name, arg.ID)
	return err
}

const updateWorkspaceNameDescription = `-- name: UpdateWorkspaceNameDescription :exec
UPDATE workspace
SET 
  name = $1,
  description = $2
WHERE id = $3
`

type UpdateWorkspaceNameDescriptionParams struct {
	Name        string
	Description string
	ID          int64
}

func (q *Queries) UpdateWorkspaceNameDescription(ctx context.Context, arg UpdateWorkspaceNameDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateWorkspaceNameDescription, arg.Name, arg.Description, arg.ID)
	return err
}
