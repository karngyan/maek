// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: embeddings.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEmbeddingJobsByStatus = `-- name: GetEmbeddingJobsByStatus :many
SELECT id,
       note_id,
       workspace_id,
       content,
       status,
       attempts,
       created,
       updated
FROM embedding_job
WHERE status = $1
`

type GetEmbeddingJobsByStatusRow struct {
	ID          int64
	NoteID      int32
	WorkspaceID int32
	Content     []byte
	Status      pgtype.Int4
	Attempts    pgtype.Int4
	Created     int64
	Updated     int64
}

func (q *Queries) GetEmbeddingJobsByStatus(ctx context.Context, status pgtype.Int4) ([]GetEmbeddingJobsByStatusRow, error) {
	rows, err := q.db.Query(ctx, getEmbeddingJobsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmbeddingJobsByStatusRow
	for rows.Next() {
		var i GetEmbeddingJobsByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.NoteID,
			&i.WorkspaceID,
			&i.Content,
			&i.Status,
			&i.Attempts,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEmbeddingJobs = `-- name: InsertEmbeddingJobs :one
INSERT INTO embedding_job (note_id, workspace_id, content)
VALUES ($1, $2, $3)
    RETURNING id
`

type InsertEmbeddingJobsParams struct {
	NoteID      int32
	WorkspaceID int32
	Content     []byte
}

func (q *Queries) InsertEmbeddingJobs(ctx context.Context, arg InsertEmbeddingJobsParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertEmbeddingJobs, arg.NoteID, arg.WorkspaceID, arg.Content)
	var id int64
	err := row.Scan(&id)
	return id, err
}
